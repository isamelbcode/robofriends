{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onrequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.083d9a4d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: 'none', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport \"./App.css\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onrequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onrequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots,isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <p>Isam Elbousserghini</p>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_FAILED\n } from \"./constants.js\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch)=>{\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then(data=> dispatch ({type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error=> dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = ' REQUEST_ROBOTS_PENDING'\n\nexport const REQUEST_ROBOTS_SUCCESS = ' REQUEST_ROBOTS_SUCCESS'\n\nexport const REQUEST_ROBOTS_FAILED = ' REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_FAILED\n } from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nconst initialStateRobots={\n    isPending: false,\n    robots: [],\n    error:''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots =(state = initialStateRobots, action ={})=>{\n    switch (action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state\n    }\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers  } from \"redux\";\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport { searchRobots, requestRobots} from \"./reducers\";\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}